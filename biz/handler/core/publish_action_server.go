// Code generated by hertz generator.

package core

import (
	"context"
	"fmt"

	core "github.com/ClubWeGo/simple-tiktok/biz/model/core"
	"github.com/ClubWeGo/simple-tiktok/kitex_server"
	"github.com/ClubWeGo/simple-tiktok/minio_server"
	"github.com/ClubWeGo/simple-tiktok/tools"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/google/uuid"
)

// PublishActionMethod .
// @router /douyin/publish/action/ [POST]
func PublishActionMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	// var req core.PublishActionReq
	// err = c.BindAndValidate(&req)  // hertz通过thirft生成的代码，对binary类型校验通不过
	// println("0000")
	// println(err.Error())
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }
	// println("111")

	token := c.PostForm("token")
	title := c.PostForm("title")
	// println(req.Token, "|", token) //  | testtoken5  // 且通过req拿不到对应数据
	// println(req.Title, "|", title) //  | seclee上传的第一个视频
	resp := new(core.PublishActionResp)

	ifValid, authorId, err := tools.ValidateToken(token)
	if err != nil {
		msgFailed := "无效Token或Token已失效"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}
	if !ifValid {
		msgFailed := "没有权限发布视频"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	fileHeader, err := c.Request.FormFile("data")
	if err != nil {
		msgFailed := "视频上传失败"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	file, err := fileHeader.Open()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	defer file.Close()

	// TODO: 当前minio的FPutObject只能传入文件目录进行上传，所以此处先把文件存在零时/tmp,需要定时清理
	// 此处由于保存后再读取，造成性能问题，后续需要优化。

	// 表单文件操作 请参考 https://github.com/cloudwego/hertz-examples/blob/main/file/upload/main.go
	filename := uuid.New().String() + ".mp4"  // uuid生成文件名
	filepath := fmt.Sprintf("/tmp/%s", title) // TODO: 当前文件类型是写死的，后续需要优化

	err = tools.SaveFile(&file, filepath)
	if err != nil {
		msgFailed := "服务器文件存储出错"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	// TODO: 当前文件类型是写死的，后续需要优化
	videourl, coverurl, err := minio_server.UploadMP4VideoToDouYin(filename, filepath, 1)
	if err != nil {
		msgFailed := "视频上传minio服务失败"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	err = kitex_server.CreateVideo(title, videourl, coverurl, authorId)
	if err != nil {
		msgFailed := "视频信息创建失败"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}
	msgsucceed := "视频上传成功"
	resp.StatusMsg = &msgsucceed
	c.JSON(consts.StatusOK, resp)
}
