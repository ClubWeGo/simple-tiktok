// Code generated by hertz generator.

package core

import (
	"context"
	"sync"

	core "github.com/ClubWeGo/simple-tiktok/biz/model/core"
	"github.com/ClubWeGo/simple-tiktok/kitex_server"
	"github.com/ClubWeGo/simple-tiktok/tools"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserInfoMethod .
// @router /douyin/user/ [GET]
func UserInfoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.UserInfoResp)

	ifValid, currentUserId, err := tools.ValidateToken(req.Token)
	if err != nil {
		msgFailed := "无效Token或Token已失效"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}
	if !ifValid {
		msgFailed := "没有权限查看信息"
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 从User服务拿User信息
	wg := &sync.WaitGroup{}

	// 获取最新的用户信息
	respLatestAuthorMap := make(chan map[int64]core.User, 1)
	defer close(respLatestAuthorMap)
	respLatestAuthorMapError := make(chan []error, 1)
	defer close(respLatestAuthorMapError)
	wg.Add(1)
	go kitex_server.GetUserLatestMap([]int64{req.UserID}, currentUserId, respLatestAuthorMap, wg, respLatestAuthorMapError)

	// 等待数据
	wg.Wait()
	// 处理协程错误
	AuthorMap := <-respLatestAuthorMap

	errSlice := <-respLatestAuthorMapError
	for _, errItem := range errSlice {
		if errItem != nil {
			msgFailed := "获取用户信息失败" + errItem.Error()
			resp.StatusCode = 1
			resp.StatusMsg = &msgFailed
			c.JSON(consts.StatusOK, resp)
			return
		}
	}

	msgsucceed := "获取用户信息成功"
	user := AuthorMap[req.UserID]
	resp.StatusMsg = &msgsucceed
	resp.User = &user
	c.JSON(consts.StatusOK, resp)
}
