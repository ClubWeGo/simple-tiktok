// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	usermicro "usermicro/kitex_gen/usermicro"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetUserByNameMethod(ctx context.Context, request *usermicro.GetUserReq, callOptions ...callopt.Option) (r *usermicro.GetUserResp, err error)
	LoginUserMethod(ctx context.Context, request *usermicro.LoginUserReq, callOptions ...callopt.Option) (r *usermicro.LoginUserResp, err error)
	CreateUserMethod(ctx context.Context, request *usermicro.CreateUserReq, callOptions ...callopt.Option) (r *usermicro.CreateUserResp, err error)
	UpdateUserMethod(ctx context.Context, request *usermicro.UpdateUserReq, callOptions ...callopt.Option) (r *usermicro.UpdateUserResp, err error)
	FollowUserMethod(ctx context.Context, request *usermicro.FollowUserReq, callOptions ...callopt.Option) (r *usermicro.FollowUserResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) GetUserByNameMethod(ctx context.Context, request *usermicro.GetUserReq, callOptions ...callopt.Option) (r *usermicro.GetUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserByNameMethod(ctx, request)
}

func (p *kUserServiceClient) LoginUserMethod(ctx context.Context, request *usermicro.LoginUserReq, callOptions ...callopt.Option) (r *usermicro.LoginUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginUserMethod(ctx, request)
}

func (p *kUserServiceClient) CreateUserMethod(ctx context.Context, request *usermicro.CreateUserReq, callOptions ...callopt.Option) (r *usermicro.CreateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUserMethod(ctx, request)
}

func (p *kUserServiceClient) UpdateUserMethod(ctx context.Context, request *usermicro.UpdateUserReq, callOptions ...callopt.Option) (r *usermicro.UpdateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUserMethod(ctx, request)
}

func (p *kUserServiceClient) FollowUserMethod(ctx context.Context, request *usermicro.FollowUserReq, callOptions ...callopt.Option) (r *usermicro.FollowUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowUserMethod(ctx, request)
}
