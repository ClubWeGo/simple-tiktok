// Code generated by Validator v0.1.4. DO NOT EDIT.

package usermicro

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *UserInfo) IsValid() error {
	if len(p.Name) < int(6) {
		return fmt.Errorf("field Name min_len rule failed, current value: %d", len(p.Name))
	}
	if len(p.Name) > int(30) {
		return fmt.Errorf("field Name max_len rule failed, current value: %d", len(p.Name))
	}
	return nil
}
func (p *LoginUserReq) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(6) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(30) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	return nil
}
func (p *LoginUserResp) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *GetUserReq) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(6) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(30) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	return nil
}
func (p *GetUserResp) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateUserReq) IsValid() error {
	if len(p.Name) < int(6) {
		return fmt.Errorf("field Name min_len rule failed, current value: %d", len(p.Name))
	}
	if len(p.Name) > int(30) {
		return fmt.Errorf("field Name max_len rule failed, current value: %d", len(p.Name))
	}
	return nil
}
func (p *CreateUserResp) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateUserReq) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(6) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(30) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	return nil
}
func (p *UpdateUserResp) IsValid() error {
	if p.User != nil {
		if err := p.User.IsValid(); err != nil {
			return fmt.Errorf("filed User not valid, %w", err)
		}
	}
	return nil
}
func (p *FollowUserReq) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(6) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(30) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	return nil
}
func (p *FollowUserResp) IsValid() error {
	return nil
}
