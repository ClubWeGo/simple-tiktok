// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	videomicro "github.com/ClubWeGo/videomicro/kitex_gen/videomicro"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videomicro.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateVideoMethod":         kitex.NewMethodInfo(createVideoMethodHandler, newVideoServiceCreateVideoMethodArgs, newVideoServiceCreateVideoMethodResult, false),
		"GetVideoMethod":            kitex.NewMethodInfo(getVideoMethodHandler, newVideoServiceGetVideoMethodArgs, newVideoServiceGetVideoMethodResult, false),
		"GetVideosByAuthorIdMethod": kitex.NewMethodInfo(getVideosByAuthorIdMethodHandler, newVideoServiceGetVideosByAuthorIdMethodArgs, newVideoServiceGetVideosByAuthorIdMethodResult, false),
		"GetVideosFeedMethod":       kitex.NewMethodInfo(getVideosFeedMethodHandler, newVideoServiceGetVideosFeedMethodArgs, newVideoServiceGetVideosFeedMethodResult, false),
		"UpdateVideoMethod":         kitex.NewMethodInfo(updateVideoMethodHandler, newVideoServiceUpdateVideoMethodArgs, newVideoServiceUpdateVideoMethodResult, false),
		"DeleteVideoMethod":         kitex.NewMethodInfo(deleteVideoMethodHandler, newVideoServiceDeleteVideoMethodArgs, newVideoServiceDeleteVideoMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videomicro",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createVideoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceCreateVideoMethodArgs)
	realResult := result.(*videomicro.VideoServiceCreateVideoMethodResult)
	success, err := handler.(videomicro.VideoService).CreateVideoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCreateVideoMethodArgs() interface{} {
	return videomicro.NewVideoServiceCreateVideoMethodArgs()
}

func newVideoServiceCreateVideoMethodResult() interface{} {
	return videomicro.NewVideoServiceCreateVideoMethodResult()
}

func getVideoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceGetVideoMethodArgs)
	realResult := result.(*videomicro.VideoServiceGetVideoMethodResult)
	success, err := handler.(videomicro.VideoService).GetVideoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideoMethodArgs() interface{} {
	return videomicro.NewVideoServiceGetVideoMethodArgs()
}

func newVideoServiceGetVideoMethodResult() interface{} {
	return videomicro.NewVideoServiceGetVideoMethodResult()
}

func getVideosByAuthorIdMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceGetVideosByAuthorIdMethodArgs)
	realResult := result.(*videomicro.VideoServiceGetVideosByAuthorIdMethodResult)
	success, err := handler.(videomicro.VideoService).GetVideosByAuthorIdMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideosByAuthorIdMethodArgs() interface{} {
	return videomicro.NewVideoServiceGetVideosByAuthorIdMethodArgs()
}

func newVideoServiceGetVideosByAuthorIdMethodResult() interface{} {
	return videomicro.NewVideoServiceGetVideosByAuthorIdMethodResult()
}

func getVideosFeedMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceGetVideosFeedMethodArgs)
	realResult := result.(*videomicro.VideoServiceGetVideosFeedMethodResult)
	success, err := handler.(videomicro.VideoService).GetVideosFeedMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetVideosFeedMethodArgs() interface{} {
	return videomicro.NewVideoServiceGetVideosFeedMethodArgs()
}

func newVideoServiceGetVideosFeedMethodResult() interface{} {
	return videomicro.NewVideoServiceGetVideosFeedMethodResult()
}

func updateVideoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceUpdateVideoMethodArgs)
	realResult := result.(*videomicro.VideoServiceUpdateVideoMethodResult)
	success, err := handler.(videomicro.VideoService).UpdateVideoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateVideoMethodArgs() interface{} {
	return videomicro.NewVideoServiceUpdateVideoMethodArgs()
}

func newVideoServiceUpdateVideoMethodResult() interface{} {
	return videomicro.NewVideoServiceUpdateVideoMethodResult()
}

func deleteVideoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videomicro.VideoServiceDeleteVideoMethodArgs)
	realResult := result.(*videomicro.VideoServiceDeleteVideoMethodResult)
	success, err := handler.(videomicro.VideoService).DeleteVideoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteVideoMethodArgs() interface{} {
	return videomicro.NewVideoServiceDeleteVideoMethodArgs()
}

func newVideoServiceDeleteVideoMethodResult() interface{} {
	return videomicro.NewVideoServiceDeleteVideoMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateVideoMethod(ctx context.Context, request *videomicro.CreateVideoReq) (r *videomicro.CreateVideoResp, err error) {
	var _args videomicro.VideoServiceCreateVideoMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceCreateVideoMethodResult
	if err = p.c.Call(ctx, "CreateVideoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoMethod(ctx context.Context, request *videomicro.GetVideoReq) (r *videomicro.GetVideoResp, err error) {
	var _args videomicro.VideoServiceGetVideoMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceGetVideoMethodResult
	if err = p.c.Call(ctx, "GetVideoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideosByAuthorIdMethod(ctx context.Context, request *videomicro.GetVideosByAuthorIdReq) (r *videomicro.GetVideosByAuthorIdResp, err error) {
	var _args videomicro.VideoServiceGetVideosByAuthorIdMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceGetVideosByAuthorIdMethodResult
	if err = p.c.Call(ctx, "GetVideosByAuthorIdMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideosFeedMethod(ctx context.Context, request *videomicro.GetVideosFeedReq) (r *videomicro.GetVideosFeedResp, err error) {
	var _args videomicro.VideoServiceGetVideosFeedMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceGetVideosFeedMethodResult
	if err = p.c.Call(ctx, "GetVideosFeedMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateVideoMethod(ctx context.Context, request *videomicro.UpdateVideoReq) (r *videomicro.UpdateVideoResp, err error) {
	var _args videomicro.VideoServiceUpdateVideoMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceUpdateVideoMethodResult
	if err = p.c.Call(ctx, "UpdateVideoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideoMethod(ctx context.Context, request *videomicro.DeleteVideoReq) (r *videomicro.DeleteVideoResp, err error) {
	var _args videomicro.VideoServiceDeleteVideoMethodArgs
	_args.Request = request
	var _result videomicro.VideoServiceDeleteVideoMethodResult
	if err = p.c.Call(ctx, "DeleteVideoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
