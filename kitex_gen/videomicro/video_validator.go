// Code generated by Validator v0.1.4. DO NOT EDIT.

package videomicro

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Video) IsValid() error {
	if len(p.Title) < int(6) {
		return fmt.Errorf("field Title min_len rule failed, current value: %d", len(p.Title))
	}
	if len(p.Title) > int(126) {
		return fmt.Errorf("field Title max_len rule failed, current value: %d", len(p.Title))
	}
	return nil
}
func (p *CreateVideoReq) IsValid() error {
	if len(p.Title) < int(6) {
		return fmt.Errorf("field Title min_len rule failed, current value: %d", len(p.Title))
	}
	if len(p.Title) > int(126) {
		return fmt.Errorf("field Title max_len rule failed, current value: %d", len(p.Title))
	}
	return nil
}
func (p *CreateVideoResp) IsValid() error {
	return nil
}
func (p *GetVideoReq) IsValid() error {
	return nil
}
func (p *GetVideoResp) IsValid() error {
	if p.Video != nil {
		if err := p.Video.IsValid(); err != nil {
			return fmt.Errorf("filed Video not valid, %w", err)
		}
	}
	return nil
}
func (p *GetVideosByAuthorIdReq) IsValid() error {
	return nil
}
func (p *GetVideosByAuthorIdResp) IsValid() error {
	return nil
}
func (p *GetVideosFeedReq) IsValid() error {
	return nil
}
func (p *GetVideosFeedResp) IsValid() error {
	return nil
}
func (p *UpdateVideoReq) IsValid() error {
	return nil
}
func (p *UpdateVideoResp) IsValid() error {
	if p.Video != nil {
		if err := p.Video.IsValid(); err != nil {
			return fmt.Errorf("filed Video not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteVideoReq) IsValid() error {
	return nil
}
func (p *DeleteVideoResp) IsValid() error {
	return nil
}
