<<<<<<< HEAD
// Code generated by hertz generator.

package main

import (
	"log"

	"github.com/ClubWeGo/douyin/kitex_server"
	"github.com/ClubWeGo/douyin/minio_server"
	"github.com/cloudwego/hertz/pkg/app/server"
=======
package main

import (
	"github.com/ClubWeGo/usermicro/dal"
	usermicro "github.com/ClubWeGo/usermicro/kitex_gen/usermicro/userservice"
	"log"
	"net"

	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/cloudwego/kitex/server"
>>>>>>> dev
	etcd "github.com/kitex-contrib/registry-etcd"
)

func main() {

<<<<<<< HEAD
	// connect Etcd
	r, err := etcd.NewEtcdResolver([]string{"0.0.0.0:2379"})
	if err != nil {
		log.Fatal(err)
	}
	// connect Micro srever
	kitex_server.Init(r)

	minioConfig := minio_server.Config{
		Endpoint:        "193.122.125.229:9000",
		AccessKeyID:     "clubwego",
		SecretAccessKey: "simpletiktok",
		UseSSL:          false,
	}
	// init minio
	minio_server.Init(minioConfig)

	h := server.Default(server.WithMaxRequestBodySize(100 * 1024 * 1024))

	register(h)
	h.Spin()
=======
	dsn := "root:yutian@mysql+ssh(127.0.0.1:3306)/simpletk?charset=utf8&parseTime=True&loc=Local"
	dal.InitDB(dsn)

	r, err := etcd.NewEtcdRegistry([]string{"0.0.0.0:2379"})
	if err != nil {
		log.Fatal(err)
	}

	addr, _ := net.ResolveTCPAddr("tcp", "0.0.0.0:10000")
	svr := usermicro.NewServer(new(UserServiceImpl),
		server.WithServerBasicInfo(&rpcinfo.EndpointBasicInfo{ServiceName: "userservice"}),
		server.WithRegistry(r),
		server.WithServiceAddr(addr))

	err = svr.Run()

	if err != nil {
		log.Println(err.Error())
	}
>>>>>>> dev
}
