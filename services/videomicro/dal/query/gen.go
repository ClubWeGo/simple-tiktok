// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
<<<<<<< HEAD
	Q    = new(Query)
	User *user
=======
	Q          = new(Query)
	Video      *video
	VideoCount *videoCount
>>>>>>> video
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
<<<<<<< HEAD
	User = &Q.User
=======
	Video = &Q.Video
	VideoCount = &Q.VideoCount
>>>>>>> video
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
<<<<<<< HEAD
		db:   db,
		User: newUser(db, opts...),
=======
		db:         db,
		Video:      newVideo(db, opts...),
		VideoCount: newVideoCount(db, opts...),
>>>>>>> video
	}
}

type Query struct {
	db *gorm.DB

<<<<<<< HEAD
	User user
=======
	Video      video
	VideoCount videoCount
>>>>>>> video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
<<<<<<< HEAD
		db:   db,
		User: q.User.clone(db),
=======
		db:         db,
		Video:      q.Video.clone(db),
		VideoCount: q.VideoCount.clone(db),
>>>>>>> video
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
<<<<<<< HEAD
		db:   db,
		User: q.User.replaceDB(db),
=======
		db:         db,
		Video:      q.Video.replaceDB(db),
		VideoCount: q.VideoCount.replaceDB(db),
>>>>>>> video
	}
}

type queryCtx struct {
<<<<<<< HEAD
	User IUserDo
=======
	Video      IVideoDo
	VideoCount IVideoCountDo
>>>>>>> video
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
<<<<<<< HEAD
		User: q.User.WithContext(ctx),
=======
		Video:      q.Video.WithContext(ctx),
		VideoCount: q.VideoCount.WithContext(ctx),
>>>>>>> video
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
