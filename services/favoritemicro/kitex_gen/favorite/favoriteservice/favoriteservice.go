// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	favorite "github.com/ClubWeGo/simple-tiktok/services/favoritemicro/kitex_gen/favorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteMethod":            kitex.NewMethodInfo(favoriteMethodHandler, newFavoriteServiceFavoriteMethodArgs, newFavoriteServiceFavoriteMethodResult, false),
		"FavoriteListMethod":        kitex.NewMethodInfo(favoriteListMethodHandler, newFavoriteServiceFavoriteListMethodArgs, newFavoriteServiceFavoriteListMethodResult, false),
		"FavoriteRelationMethod":    kitex.NewMethodInfo(favoriteRelationMethodHandler, newFavoriteServiceFavoriteRelationMethodArgs, newFavoriteServiceFavoriteRelationMethodResult, false),
		"FavoriteRelationsMethod":   kitex.NewMethodInfo(favoriteRelationsMethodHandler, newFavoriteServiceFavoriteRelationsMethodArgs, newFavoriteServiceFavoriteRelationsMethodResult, false),
		"VideoFavoriteCountMethod":  kitex.NewMethodInfo(videoFavoriteCountMethodHandler, newFavoriteServiceVideoFavoriteCountMethodArgs, newFavoriteServiceVideoFavoriteCountMethodResult, false),
		"UserFavoriteCountMethod":   kitex.NewMethodInfo(userFavoriteCountMethodHandler, newFavoriteServiceUserFavoriteCountMethodArgs, newFavoriteServiceUserFavoriteCountMethodResult, false),
		"VideosFavoriteCountMethod": kitex.NewMethodInfo(videosFavoriteCountMethodHandler, newFavoriteServiceVideosFavoriteCountMethodArgs, newFavoriteServiceVideosFavoriteCountMethodResult, false),
		"UsersFavoriteCountMethod":  kitex.NewMethodInfo(usersFavoriteCountMethodHandler, newFavoriteServiceUsersFavoriteCountMethodArgs, newFavoriteServiceUsersFavoriteCountMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteMethodArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteMethodResult)
	success, err := handler.(favorite.FavoriteService).FavoriteMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteMethodArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteMethodArgs()
}

func newFavoriteServiceFavoriteMethodResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteMethodResult()
}

func favoriteListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteListMethodArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteListMethodResult)
	success, err := handler.(favorite.FavoriteService).FavoriteListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteListMethodArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteListMethodArgs()
}

func newFavoriteServiceFavoriteListMethodResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteListMethodResult()
}

func favoriteRelationMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteRelationMethodArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteRelationMethodResult)
	success, err := handler.(favorite.FavoriteService).FavoriteRelationMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteRelationMethodArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteRelationMethodArgs()
}

func newFavoriteServiceFavoriteRelationMethodResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteRelationMethodResult()
}

func favoriteRelationsMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteRelationsMethodArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteRelationsMethodResult)
	success, err := handler.(favorite.FavoriteService).FavoriteRelationsMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteRelationsMethodArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteRelationsMethodArgs()
}

func newFavoriteServiceFavoriteRelationsMethodResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteRelationsMethodResult()
}

func videoFavoriteCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceVideoFavoriteCountMethodArgs)
	realResult := result.(*favorite.FavoriteServiceVideoFavoriteCountMethodResult)
	success, err := handler.(favorite.FavoriteService).VideoFavoriteCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceVideoFavoriteCountMethodArgs() interface{} {
	return favorite.NewFavoriteServiceVideoFavoriteCountMethodArgs()
}

func newFavoriteServiceVideoFavoriteCountMethodResult() interface{} {
	return favorite.NewFavoriteServiceVideoFavoriteCountMethodResult()
}

func userFavoriteCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceUserFavoriteCountMethodArgs)
	realResult := result.(*favorite.FavoriteServiceUserFavoriteCountMethodResult)
	success, err := handler.(favorite.FavoriteService).UserFavoriteCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceUserFavoriteCountMethodArgs() interface{} {
	return favorite.NewFavoriteServiceUserFavoriteCountMethodArgs()
}

func newFavoriteServiceUserFavoriteCountMethodResult() interface{} {
	return favorite.NewFavoriteServiceUserFavoriteCountMethodResult()
}

func videosFavoriteCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceVideosFavoriteCountMethodArgs)
	realResult := result.(*favorite.FavoriteServiceVideosFavoriteCountMethodResult)
	success, err := handler.(favorite.FavoriteService).VideosFavoriteCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceVideosFavoriteCountMethodArgs() interface{} {
	return favorite.NewFavoriteServiceVideosFavoriteCountMethodArgs()
}

func newFavoriteServiceVideosFavoriteCountMethodResult() interface{} {
	return favorite.NewFavoriteServiceVideosFavoriteCountMethodResult()
}

func usersFavoriteCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceUsersFavoriteCountMethodArgs)
	realResult := result.(*favorite.FavoriteServiceUsersFavoriteCountMethodResult)
	success, err := handler.(favorite.FavoriteService).UsersFavoriteCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceUsersFavoriteCountMethodArgs() interface{} {
	return favorite.NewFavoriteServiceUsersFavoriteCountMethodArgs()
}

func newFavoriteServiceUsersFavoriteCountMethodResult() interface{} {
	return favorite.NewFavoriteServiceUsersFavoriteCountMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteMethod(ctx context.Context, request *favorite.FavoriteReq) (r *favorite.FavoriteResp, err error) {
	var _args favorite.FavoriteServiceFavoriteMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceFavoriteMethodResult
	if err = p.c.Call(ctx, "FavoriteMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteListMethod(ctx context.Context, request *favorite.FavoriteListReq) (r *favorite.FavoriteListResp, err error) {
	var _args favorite.FavoriteServiceFavoriteListMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceFavoriteListMethodResult
	if err = p.c.Call(ctx, "FavoriteListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteRelationMethod(ctx context.Context, request *favorite.FavoriteRelationReq) (r *favorite.FavoriteRelationResp, err error) {
	var _args favorite.FavoriteServiceFavoriteRelationMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceFavoriteRelationMethodResult
	if err = p.c.Call(ctx, "FavoriteRelationMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteRelationsMethod(ctx context.Context, request *favorite.FavoriteRelationsReq) (r *favorite.FavoriteRelationsResp, err error) {
	var _args favorite.FavoriteServiceFavoriteRelationsMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceFavoriteRelationsMethodResult
	if err = p.c.Call(ctx, "FavoriteRelationsMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFavoriteCountMethod(ctx context.Context, request *favorite.VideoFavoriteCountReq) (r *favorite.VideoFavoriteCountResp, err error) {
	var _args favorite.FavoriteServiceVideoFavoriteCountMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceVideoFavoriteCountMethodResult
	if err = p.c.Call(ctx, "VideoFavoriteCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserFavoriteCountMethod(ctx context.Context, request *favorite.UserFavoriteCountReq) (r *favorite.UserFavoriteCountResp, err error) {
	var _args favorite.FavoriteServiceUserFavoriteCountMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceUserFavoriteCountMethodResult
	if err = p.c.Call(ctx, "UserFavoriteCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideosFavoriteCountMethod(ctx context.Context, request *favorite.VideosFavoriteCountReq) (r *favorite.VideosFavoriteCountResp, err error) {
	var _args favorite.FavoriteServiceVideosFavoriteCountMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceVideosFavoriteCountMethodResult
	if err = p.c.Call(ctx, "VideosFavoriteCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UsersFavoriteCountMethod(ctx context.Context, request *favorite.UsersFavoriteCountReq) (r *favorite.UsersFavoriteCountResp, err error) {
	var _args favorite.FavoriteServiceUsersFavoriteCountMethodArgs
	_args.Request = request
	var _result favorite.FavoriteServiceUsersFavoriteCountMethodResult
	if err = p.c.Call(ctx, "UsersFavoriteCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
